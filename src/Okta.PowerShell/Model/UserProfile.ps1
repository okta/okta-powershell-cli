#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER City
No description available.
.PARAMETER CostCenter
No description available.
.PARAMETER CountryCode
No description available.
.PARAMETER Department
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Division
No description available.
.PARAMETER Email
No description available.
.PARAMETER EmployeeNumber
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER HonorificPrefix
No description available.
.PARAMETER HonorificSuffix
No description available.
.PARAMETER LastName
No description available.
.PARAMETER Locale
The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646).
.PARAMETER Login
No description available.
.PARAMETER Manager
No description available.
.PARAMETER ManagerId
No description available.
.PARAMETER MiddleName
No description available.
.PARAMETER MobilePhone
No description available.
.PARAMETER NickName
No description available.
.PARAMETER Organization
No description available.
.PARAMETER PostalAddress
No description available.
.PARAMETER PreferredLanguage
No description available.
.PARAMETER PrimaryPhone
No description available.
.PARAMETER ProfileUrl
No description available.
.PARAMETER SecondEmail
No description available.
.PARAMETER State
No description available.
.PARAMETER StreetAddress
No description available.
.PARAMETER Timezone
No description available.
.PARAMETER Title
No description available.
.PARAMETER UserType
No description available.
.PARAMETER ZipCode
No description available.
.OUTPUTS

UserProfile<PSCustomObject>
#>

function Initialize-OktaUserProfile {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CostCenter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryCode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Department},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Division},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeNumber},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HonorificPrefix},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HonorificSuffix},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Locale},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Login},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Manager},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ManagerId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MiddleName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MobilePhone},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NickName},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Organization},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostalAddress},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PreferredLanguage},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryPhone},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProfileUrl},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondEmail},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StreetAddress},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserType},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ZipCode}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaUserProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($City -and $City.length -gt 128) {
            throw "invalid value for 'City', the character length must be smaller than or equal to 128."
        }

        if ($CountryCode -and $CountryCode.length -gt 2) {
            throw "invalid value for 'CountryCode', the character length must be smaller than or equal to 2."
        }

        if ($Email -and $Email.length -gt 100) {
            throw "invalid value for 'Email', the character length must be smaller than or equal to 100."
        }

        if ($Email -and $Email.length -lt 5) {
            throw "invalid value for 'Email', the character length must be great than or equal to 5."
        }

        if ($FirstName -and $FirstName.length -gt 50) {
            throw "invalid value for 'FirstName', the character length must be smaller than or equal to 50."
        }

        if ($FirstName -and $FirstName.length -lt 1) {
            throw "invalid value for 'FirstName', the character length must be great than or equal to 1."
        }

        if ($LastName -and $LastName.length -gt 50) {
            throw "invalid value for 'LastName', the character length must be smaller than or equal to 50."
        }

        if ($LastName -and $LastName.length -lt 1) {
            throw "invalid value for 'LastName', the character length must be great than or equal to 1."
        }

        if ($Login -and $Login.length -gt 100) {
            throw "invalid value for 'Login', the character length must be smaller than or equal to 100."
        }

        if ($MobilePhone -and $MobilePhone.length -gt 100) {
            throw "invalid value for 'MobilePhone', the character length must be smaller than or equal to 100."
        }

        if ($PostalAddress -and $PostalAddress.length -gt 4096) {
            throw "invalid value for 'PostalAddress', the character length must be smaller than or equal to 4096."
        }

        if ($PrimaryPhone -and $PrimaryPhone.length -gt 100) {
            throw "invalid value for 'PrimaryPhone', the character length must be smaller than or equal to 100."
        }

        if ($SecondEmail -and $SecondEmail.length -gt 100) {
            throw "invalid value for 'SecondEmail', the character length must be smaller than or equal to 100."
        }

        if ($SecondEmail -and $SecondEmail.length -lt 5) {
            throw "invalid value for 'SecondEmail', the character length must be great than or equal to 5."
        }

        if ($State -and $State.length -gt 128) {
            throw "invalid value for 'State', the character length must be smaller than or equal to 128."
        }

        if ($StreetAddress -and $StreetAddress.length -gt 1024) {
            throw "invalid value for 'StreetAddress', the character length must be smaller than or equal to 1024."
        }

        if ($ZipCode -and $ZipCode.length -gt 50) {
            throw "invalid value for 'ZipCode', the character length must be smaller than or equal to 50."
        }


        $PSO = [PSCustomObject]@{
            "city" = ${City}
            "costCenter" = ${CostCenter}
            "countryCode" = ${CountryCode}
            "department" = ${Department}
            "displayName" = ${DisplayName}
            "division" = ${Division}
            "email" = ${Email}
            "employeeNumber" = ${EmployeeNumber}
            "firstName" = ${FirstName}
            "honorificPrefix" = ${HonorificPrefix}
            "honorificSuffix" = ${HonorificSuffix}
            "lastName" = ${LastName}
            "locale" = ${Locale}
            "login" = ${Login}
            "manager" = ${Manager}
            "managerId" = ${ManagerId}
            "middleName" = ${MiddleName}
            "mobilePhone" = ${MobilePhone}
            "nickName" = ${NickName}
            "organization" = ${Organization}
            "postalAddress" = ${PostalAddress}
            "preferredLanguage" = ${PreferredLanguage}
            "primaryPhone" = ${PrimaryPhone}
            "profileUrl" = ${ProfileUrl}
            "secondEmail" = ${SecondEmail}
            "state" = ${State}
            "streetAddress" = ${StreetAddress}
            "timezone" = ${Timezone}
            "title" = ${Title}
            "userType" = ${UserType}
            "zipCode" = ${ZipCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserProfile<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserProfile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserProfile<PSCustomObject>
#>
function ConvertFrom-OktaJsonToUserProfile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaUserProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $OktaUserProfileAdditionalProperties = @{}

        # check if Json contains properties not defined in OktaUserProfile
        $AllProperties = ("city", "costCenter", "countryCode", "department", "displayName", "division", "email", "employeeNumber", "firstName", "honorificPrefix", "honorificSuffix", "lastName", "locale", "login", "manager", "managerId", "middleName", "mobilePhone", "nickName", "organization", "postalAddress", "preferredLanguage", "primaryPhone", "profileUrl", "secondEmail", "state", "streetAddress", "timezone", "title", "userType", "zipCode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $OktaUserProfileAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "costCenter"))) { #optional property not found
            $CostCenter = $null
        } else {
            $CostCenter = $JsonParameters.PSobject.Properties["costCenter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countryCode"))) { #optional property not found
            $CountryCode = $null
        } else {
            $CountryCode = $JsonParameters.PSobject.Properties["countryCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "department"))) { #optional property not found
            $Department = $null
        } else {
            $Department = $JsonParameters.PSobject.Properties["department"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "division"))) { #optional property not found
            $Division = $null
        } else {
            $Division = $JsonParameters.PSobject.Properties["division"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeNumber"))) { #optional property not found
            $EmployeeNumber = $null
        } else {
            $EmployeeNumber = $JsonParameters.PSobject.Properties["employeeNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "honorificPrefix"))) { #optional property not found
            $HonorificPrefix = $null
        } else {
            $HonorificPrefix = $JsonParameters.PSobject.Properties["honorificPrefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "honorificSuffix"))) { #optional property not found
            $HonorificSuffix = $null
        } else {
            $HonorificSuffix = $JsonParameters.PSobject.Properties["honorificSuffix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locale"))) { #optional property not found
            $Locale = $null
        } else {
            $Locale = $JsonParameters.PSobject.Properties["locale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "login"))) { #optional property not found
            $Login = $null
        } else {
            $Login = $JsonParameters.PSobject.Properties["login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manager"))) { #optional property not found
            $Manager = $null
        } else {
            $Manager = $JsonParameters.PSobject.Properties["manager"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managerId"))) { #optional property not found
            $ManagerId = $null
        } else {
            $ManagerId = $JsonParameters.PSobject.Properties["managerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "middleName"))) { #optional property not found
            $MiddleName = $null
        } else {
            $MiddleName = $JsonParameters.PSobject.Properties["middleName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mobilePhone"))) { #optional property not found
            $MobilePhone = $null
        } else {
            $MobilePhone = $JsonParameters.PSobject.Properties["mobilePhone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nickName"))) { #optional property not found
            $NickName = $null
        } else {
            $NickName = $JsonParameters.PSobject.Properties["nickName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postalAddress"))) { #optional property not found
            $PostalAddress = $null
        } else {
            $PostalAddress = $JsonParameters.PSobject.Properties["postalAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preferredLanguage"))) { #optional property not found
            $PreferredLanguage = $null
        } else {
            $PreferredLanguage = $JsonParameters.PSobject.Properties["preferredLanguage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryPhone"))) { #optional property not found
            $PrimaryPhone = $null
        } else {
            $PrimaryPhone = $JsonParameters.PSobject.Properties["primaryPhone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profileUrl"))) { #optional property not found
            $ProfileUrl = $null
        } else {
            $ProfileUrl = $JsonParameters.PSobject.Properties["profileUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondEmail"))) { #optional property not found
            $SecondEmail = $null
        } else {
            $SecondEmail = $JsonParameters.PSobject.Properties["secondEmail"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetAddress"))) { #optional property not found
            $StreetAddress = $null
        } else {
            $StreetAddress = $JsonParameters.PSobject.Properties["streetAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userType"))) { #optional property not found
            $UserType = $null
        } else {
            $UserType = $JsonParameters.PSobject.Properties["userType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zipCode"))) { #optional property not found
            $ZipCode = $null
        } else {
            $ZipCode = $JsonParameters.PSobject.Properties["zipCode"].value
        }

        $PSO = [PSCustomObject]@{
            "city" = ${City}
            "costCenter" = ${CostCenter}
            "countryCode" = ${CountryCode}
            "department" = ${Department}
            "displayName" = ${DisplayName}
            "division" = ${Division}
            "email" = ${Email}
            "employeeNumber" = ${EmployeeNumber}
            "firstName" = ${FirstName}
            "honorificPrefix" = ${HonorificPrefix}
            "honorificSuffix" = ${HonorificSuffix}
            "lastName" = ${LastName}
            "locale" = ${Locale}
            "login" = ${Login}
            "manager" = ${Manager}
            "managerId" = ${ManagerId}
            "middleName" = ${MiddleName}
            "mobilePhone" = ${MobilePhone}
            "nickName" = ${NickName}
            "organization" = ${Organization}
            "postalAddress" = ${PostalAddress}
            "preferredLanguage" = ${PreferredLanguage}
            "primaryPhone" = ${PrimaryPhone}
            "profileUrl" = ${ProfileUrl}
            "secondEmail" = ${SecondEmail}
            "state" = ${State}
            "streetAddress" = ${StreetAddress}
            "timezone" = ${Timezone}
            "title" = ${Title}
            "userType" = ${UserType}
            "zipCode" = ${ZipCode}
            "AdditionalProperties" = $OktaUserProfileAdditionalProperties
        }

        return $PSO
    }

}

