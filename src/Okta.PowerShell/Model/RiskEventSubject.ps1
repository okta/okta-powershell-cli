#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ip
Either an IpV4 or IpV6 address.
.PARAMETER Message
Any additional message that the provider can send specifying the reason for the risk level of the IP.
.PARAMETER RiskLevel
No description available.
.OUTPUTS

RiskEventSubject<PSCustomObject>
#>

function Initialize-OktaRiskEventSubject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9.\-_]$")]
        [String]
        ${Message},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("HIGH", "LOW", "MEDIUM")]
        [PSCustomObject]
        ${RiskLevel}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaRiskEventSubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Ip) {
            throw "invalid value for 'Ip', 'Ip' cannot be null."
        }

        if ($Message -and $Message.length -gt 512) {
            throw "invalid value for 'Message', the character length must be smaller than or equal to 512."
        }


        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "message" = ${Message}
            "riskLevel" = ${RiskLevel}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RiskEventSubject<PSCustomObject>

.DESCRIPTION

Convert from JSON to RiskEventSubject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RiskEventSubject<PSCustomObject>
#>
function ConvertFrom-OktaJsonToRiskEventSubject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaRiskEventSubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaRiskEventSubject
        $AllProperties = ("ip", "message", "riskLevel")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ip' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ip' missing."
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "riskLevel"))) { #optional property not found
            $RiskLevel = $null
        } else {
            $RiskLevel = $JsonParameters.PSobject.Properties["riskLevel"].value
        }

        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "message" = ${Message}
            "riskLevel" = ${RiskLevel}
        }

        return $PSO
    }

}

