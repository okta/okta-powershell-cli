#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Splunk Cloud Settings object specifies the configuration for the `splunk_cloud_logstreaming` Log Stream type.

.PARAMETER VarHost
The domain name for your Splunk Cloud instance. Don't include `http` or `https` in the string. For example: `acme.splunkcloud.com`
.PARAMETER Token
The HEC token for your Splunk Cloud HTTP Event Collector
.OUTPUTS

LogStreamSettingsSplunkAllOf<PSCustomObject>
#>

function Initialize-OktaLogStreamSettingsSplunkAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(?i)^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")]
        [String]
        ${Token}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaLogStreamSettingsSplunkAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($VarHost -and $VarHost.length -gt 116) {
            throw "invalid value for 'VarHost', the character length must be smaller than or equal to 116."
        }

        if ($VarHost -and $VarHost.length -lt 17) {
            throw "invalid value for 'VarHost', the character length must be great than or equal to 17."
        }


        $PSO = [PSCustomObject]@{
            "host" = ${VarHost}
            "token" = ${Token}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogStreamSettingsSplunkAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogStreamSettingsSplunkAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogStreamSettingsSplunkAllOf<PSCustomObject>
#>
function ConvertFrom-OktaJsonToLogStreamSettingsSplunkAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaLogStreamSettingsSplunkAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaLogStreamSettingsSplunkAllOf
        $AllProperties = ("host", "token")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host"))) { #optional property not found
            $VarHost = $null
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        $PSO = [PSCustomObject]@{
            "host" = ${VarHost}
            "token" = ${Token}
        }

        return $PSO
    }

}

