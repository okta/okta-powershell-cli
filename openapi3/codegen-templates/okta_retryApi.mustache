#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#


<#
.SYNOPSIS

Indicate if a request should be retried

.DESCRIPTION

Indicate if a request should be retried

.PARAMETER StatusCode

StatusCode of the response

.PARAMETER RetryCount

Indicate how many times the request was already retried

.PARAMETER ElapsedTime

Indicate the elapsed time in milliseconds since the request was executed for the first time

.OUTPUTS

bool
#>

function ShouldRetry {
    Param (
     [Parameter(Mandatory)]
     [Int]$StatusCode,
     [Parameter(Mandatory)]
     [Int]$RetryCount,
     [Parameter(Mandatory)]
     [Int]$ElapsedTime
    )
    #Write-Verbose "Evaluating Status Code: "  $StatusCode
    $Configuration = Get-OktaConfiguration
    
    if ($null -eq $Configuration.MaxRetries -or $Configuration.MaxRetries -le 0 ) {
        return $false
    }

    if (($StatusCode -eq 429) -and ($RetryCount -lt $Configuration.MaxRetries) -and 
        ($null -eq $Configuration.RequestTimeout -or ($Configuration.RequestTimeout -gt 0 -and $ElapsedTime -lt $Configuration.RequestTimeout))){
        
         return $true
    }

    return $false
}

<#
.SYNOPSIS

Calculate the time to delay the next retry request execution

.DESCRIPTION

Calculate the time in milliseconds to delay the next retry request execution

.PARAMETER Headers

The response's headers

.OUTPUTS

int
#>

function CalculateDelay {
    Param (
    [Parameter(Mandatory)]
    [hashtable]$Headers
    )
    
    Write-Verbose "Calculating the delay to retry the request"

    $Configuration = Get-OktaConfiguration

    if ($null -eq $Headers['x-rate-limit-reset']) {
        throw "Error! The required header `x-rate-limit-reset` missing when calling CalculateDelay." 
    }
    
    $RateLimitResetEpoch = $Headers["x-rate-limit-reset"][0]
    # this is a unich seconds since epoch time, so we convert to date
    $RateLimitResetUTC = New-Object DateTime(1970, 1, 1, 0, 0, 0, 0)
    $RateLimitResetUTC = $RateLimitResetUTC.addSeconds($RateLimitResetEpoch)
    $RetryAtUtcTime = $RateLimitResetUTC
    

    if ($null -eq $Headers["Date"]) {
        throw "Error! The required header `Date` missing when calling CalculateDelay."    
    }

    $Date = Get-Date -Date $Headers["Date"][0]
    $RequestUtcDate = $Date.ToUniversalTime()
    
    $BackoffInMilliseconds = (New-TimeSpan -Start $RequestUtcDate -End $RetryAtUtcTime).TotalMilliseconds + 1000 #delta
    
    return $BackoffInMilliseconds
}

<#
.SYNOPSIS

Add the corresponding headers to an existing headers list in order to perform a retry request

.DESCRIPTION

Add the corresponding headers to an existing headers list in order to perform a retry request

.PARAMETER Headers

The response's headers

.PARAMETER RequestId

The request ID

.PARAMETER RetryCount

The number of retry attempts including the upcoming retry (i.e request was executed 2 times and a new retry is gonna be executed. RetryCount should be 30)

.OUTPUTS

[hashtable]$Headers
#>

function AddRetryHeaders {
    Param(
        [Parameter(Mandatory)]
        [AllowEmptyCollection()]
        [hashtable]$Headers,
        [Parameter(Mandatory)]
        [String]$RequestId,
        [Parameter(Mandatory)]
        [int]$RetryCount
    )
    
    $Headers["X-Okta-Retry-For"] = $RequestId
    $Headers["X-Okta-Retry-Count"] = $RetryCount
    #Write-Verbose "Adding retry headers > RequestId: " $RequestId " RetryCount: " $RetryCount
}